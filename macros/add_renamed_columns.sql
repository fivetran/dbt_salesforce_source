{% macro add_renamed_columns(column_list) %}
{# 
    This macro is a step in a workflow applied across models. It appends camelCase spellings to the list of snake_case spellings generated by the `get_*_columns` macro.  
    By default, it transforms column names by removing underscores and capitalizing each segment following an underscore.  
    Additionally, it tags each column with its renamed version to facilitate tracking and consistency.  

    Overview:
    1. `get_*_columns`: Creates list of snake_case columns for a given source table.  
        1a. `add_renamed_columns`: Appends camelCase spellings of columns to the list.  
        1b. `add_pass_through_columns`: Appends columns specified in the passthrough variable to the list.  
    2. `column_list_to_dict`: Converts the list of columns generated in Step 1 into a dictionary, simplifying subsequent operations.  
    3. `fill_staging_columns`: Ensures all columns from Step 1 are present in the source table by filling `null` values for any missing columns. For columns with multiple spellings, a `null` column is created for the unused spelling.  
    4. `coalesce_rename`: Uses the dictionary from `column_list_to_dict` to coalesce a column with its renamed counterpart. This step generates the final column and supports custom arguments for renamed spelling, data type, and alias to override default values.  
#}

{%- set renamed_columns = [] %}

{%- for col in column_list %}

    {%- set original_column_name = col.name %}

    {%- if 'fivetran' not in original_column_name %}
        {# Use renamed_column_name value if it provided in the get_columns macro #}
        {%- set renamed_column_name = col.renamed_column_name | default(original_column_name.split('_') | map('capitalize') | join('')) %}

        {# Add an entry to the list of renames to populate the filled columns if the rename is different #}
        {%- do renamed_columns.append({"name": renamed_column_name, "datatype": col.datatype, "is_rename": true}) if renamed_column_name|lower != original_column_name|lower %}

        {# Update the original column with the renamed column name for use later. #}
        {%- set col = col.update({ "renamed_column_name": renamed_column_name, "is_rename": false}) %}
    {%- endif %}
{%- endfor %}

{%- do column_list.extend(renamed_columns) %}

{% endmacro %}
